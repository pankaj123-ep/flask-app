name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:

  build-and-push:

    name: build-and-push
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.vars.outputs.image-tag }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker image tag
      id: vars
      run: echo "image-tag=$(date +%s)" >> $GITHUB_OUTPUT
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ipdocker/flask-app:${{ steps.vars.outputs.image-tag }}
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: "ipdocker"
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push the Docker image
      run: docker push ipdocker/flask-app:${{ steps.vars.outputs.image-tag }}
      env:
        DOCKER_BUILDKIT: 1
    - name: upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: taskdef_file
        path: ecs/app-flask-revision1.json
  
  run-image:
    name: Pull and Run Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: "ipdocker"
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull Docker image
        run: docker pull ipdocker/flask-app:${{ needs.build-and-push.outputs.image-tag }}

      #- name: Run Docker container
      #  run: docker run -d --rm ipdocker/flask-app:${{ needs.build-and-push.outputs.image-tag }}
      #- name: curl host
      #  run: curl http://localhost:5000
      #  continue-on-error: false
  deployToEcs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: run-image
    permissions:
          id-token: write
          contents: read

    steps:
      - name: Log in to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      
      - name: Download task definition artifact
        uses: actions/download-artifact@v4
        with:
          name: taskdef_file
      - name: Render new image in task definition
        id: render-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: app-flask-revision1.json
          container-name: flask-app
          image: ipdocker/flask-app:${{ needs.build-and-push.outputs.image-tag }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-container.outputs.task-definition }}
          service: app-flask-service
          cluster: app
          wait-for-service-stability: true
  
 